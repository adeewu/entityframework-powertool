<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs|Models|Context" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	var modelNameSuffix = "Model";
#>
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

<#
	var modelNamespaces = efHost.Namespace.Split('.');
	var modelNamespacePrefix = string.Join(".", modelNamespaces.Take(modelNamespaces.Count() - 1));
#>
using <#= modelNamespacePrefix #>.DAL.Models;
using <#= code.EscapeNamespace(efHost.Namespace) #>.<#= efHost.NameSpaceSuffix #>.Maps;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>.<#= efHost.NameSpaceSuffix #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        public <#= efHost.EntityContainer.Name #>()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
			Database.Log = (message =>
            {
                System.Diagnostics.Debug.Print(message);
            });
        }

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        public DbSet<<#= set.ElementType.Name #><#= modelNameSuffix #>> <#= set.Name #><#= modelNameSuffix #>s { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>Map());
<#
    }
#>
        }
    }
}
